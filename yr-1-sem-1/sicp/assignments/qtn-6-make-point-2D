#lang racket
(require rnrs/mutable-pairs-6)

;QTN 6
(define (make-point-2D x y)
  (let ((self (cons x y)))
    (define (point-x)
      (car self))
    (define (point-y)
      (cdr self))

    ;QTN1
    ;operation to updates the value of x
    (define (set-x! value)
      (set-car! self value)
      )
    
    ;operation that updates the value of y
    (define (set-y! value_of_y)
      (set-cdr! self value_of_y)
      )

    ;QTN2
    ;an operaton to clone the original object with independent changes not affecting the original object
    (define (clone) (make-point-2D x y))

    
    ;QTN3
    ;an operation to find the distance between two point objects
    (define (distance p1 p2)
      (sqrt (+(+(-(expt (p1 'point-x) 2)(* 2(p1 'point-x) (p2 'point-x)))(expt (p2 'point-x) 2))
      (+(-(expt (p1 'point-y) 2)(* 2(p1 'point-y) (p2 'point-y)))(expt (p2 'point-y) 2))))
      )

    ;QTN 4
    ;an operation translate that moves the coordinates x and y by dx and dy
    (define (translate p1 dx dy)
      (p1 'set-x! (- (p1 'point-x) dx))
      (p1 'set-y! (- (p1 'point-y) dy))
      )

    ;QTN 5
    ;Comparing whether two points are equal
    (define (point=? point-1 point-2) 
      (if (and (pair? point-1) (pair? point-2)) 
       (and (point=? (car point-1) (car point-2)) (point=? (cdr point-1) (cdr point-2))) 
       (eq? point-1 point-2))) 
    
    
    (define (pretty-print)
      (list 'x: self))
            (lambda (message . args)
              (case message
                ((point-x) (point-x))
                ((point-y) (point-y))
                ((set-x!) (apply set-x! args))
                ((set-y!) (apply set-y! args))
                ((clone) (clone))
                ((distance) (apply distance args))
                ((translate) (apply translate args))
                ((pretty-print) (pretty-print))
                ((point=?) (apply point=? args))
                
                ;..
                ;other operations go here
                (else (error "UKNOWN MESSAGE"))))
    ))

(define p1 (make-point-2D 4 2))
(p1 'point-x)
(define p2 (p1 'clone))
(p1 'point=? p2)

