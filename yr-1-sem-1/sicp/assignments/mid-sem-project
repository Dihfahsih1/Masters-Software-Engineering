#lang scheme
(require rnrs/mutable-pairs-6)

<<<<<<< HEAD
(define x 7)
(define y 4)


=======
>>>>>>> 16a6114065ed2d0a6d583b79e28c60d171534cd5
(define (make-point x y)
  (cons x y))

(define (point-x p)  
  (car p) 
 )

(define (point-y p)
  (cdr p))
<<<<<<< HEAD
;QTN 1
;the setter operation to update x value in make-point with a new value 10
(define (set-x! p)
  (begin (set! point-x p)
=======

;the setter operation to update x value in make-point with a new value 10
(define (set-x! p)
  (begin (set! point-x 10)
>>>>>>> 16a6114065ed2d0a6d583b79e28c60d171534cd5
         point-x))

;the setter operation to update y value in make-point with a new value 20
(define (set-y! p)
<<<<<<< HEAD
  (begin (set! point-y p)
         point-y))
;QTN 2
;Copying the object point make-point
(define (clone p)
  (make-point(car p) (cdr p)))
(define (copy-print p)
  (list 'copy-x: (point-x p) 'copy-y: (point-y p)))
 
 ;QTN 3 
;Distance between two given points
;(x1, y1) and (x2, y2)
; d = (sqrt(+(square (- x2 x1)) (square(-y2 y1))))
;both sqrt(squareroot) and sqr(square) are abstract functiins that have their implementation in scheme
;so just use them directly cos they are already defined in the language
(define (distance p1 p2)
  (sqrt
   (+ (sqr (- (point-x p1) (point-x p2)))
      (sqr (- (point-y p1) (point-y p2))))))

(distance (make-point 1 2) (make-point 6 7))
=======
  (begin (set! point-y 20)
         point-y))

;Copying the object point make-point

(define (clone make-point p)
  (let ((new (p)))
    (set-car! new p)
    (set-cdr! new p)
    new))
  

>>>>>>> 16a6114065ed2d0a6d583b79e28c60d171534cd5


(define (pretty-print p)
  (list 'x: (point-x p) 'y: (point-y p)))
(pretty-print (make-point 2 3))
<<<<<<< HEAD
(copy-print (clone (make-point 12 34)))

;QTN 4
(define (translate x y)
  (lambda (dx dy)
          (translate
           (+ x dx)
           (+ y dy))))
(translate 20 30)

(define (translate p1 dx dy)
      (p1 'set-x! (- (p1 'point-x) dx))
      (p1 'set-y! (- (p1 'point-y) dy))
      )

;QTN 5
(define (point=? point-1 point-2) 
   (if (and (pair? point-1) (pair? point-2)) 
       (and (point=? (car point-1) (car point-2)) (point=? (cdr point-1) (cdr point-2))) 
       (eq? point-1 point-2))) 

(point=? (make-point 2 3) (make-point 3 2))

=======

(define (copy-print p)
  (list 'copy-x: (point-x p) 'copy-y: (point-y p)))
(copy-print (clone 20 40))
 







;solution
>>>>>>> 16a6114065ed2d0a6d583b79e28c60d171534cd5
