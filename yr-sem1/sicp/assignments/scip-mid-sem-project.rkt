#lang scheme
(require rnrs/mutable-pairs-6)

(define (cons x y)
  (let ((new (get-new-pair)))
(set-car! new x)
(set-cdr! new y)
new))
(define (instantiate exp frame unbound-var-handler)
(define (copy exp)
(cond ((var? exp)
(let ((binding (binding-in-frame exp frame)))
(if binding
(copy (binding-value binding))
(unbound-var-handler exp frame))))
((pair? exp)
(cons (copy (car exp)) (copy (cdr exp))))
(else exp)))
(copy exp))


(define(expr-return obj)
  (lambda () (copy-object obj))
  (define x (make-point))
  (define y (expr-return x))
  (define cx (y))
  (begin(set-cdr! x 'foo)
        x)
  )
(cons 3 5)